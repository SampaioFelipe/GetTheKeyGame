Microsoft (R) Macro Assembler Version 12.00.21005.1	    02/03/17 00:24:31
getTheKey.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 00			Xmargin BYTE ? ; Margem da lateral esquerda usada para centralizar o ambiente do jogo
 00000001 00			CurrentLine BYTE 0 ; Auxilia na contagem de linhas ao desenhar o cenario

 00000002 0000			minMap WORD ? ; Limite minimo do espaco onde o jogador pode se locomover
							  ; Formato (Limite X | Limite Y)
 00000004 0000			maxMap WORD ? ; Limite maximo do espaco onde o jogador pode se locomover
							  ; Formato (Limite X | Limite Y)

 00000006 20 5F 5F 5F 5F	logo1 byte ' ______     ______     ______      ______   __  __     ______        __  __     ______     __  __ ',0dh,0ah,0
	   5F 5F 20 20 20
	   20 20 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 5F
	   5F 20 20 5F 5F
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 5F
	   5F 20 20 5F 5F
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 5F 5F 20 20
	   5F 5F 20 0D 0A
	   00
 0000006B 2F 5C 20 20 5F	logo2 byte '/\  ___\   /\  ___\   /\__  _\    /\__  _\ /\ \_\ \   /\  ___\      /\ \/ /    /\  ___\   /\ \_\ \ ',0dh,0ah,0
	   5F 5F 5C 20 20
	   20 2F 5C 20 20
	   5F 5F 5F 5C 20
	   20 20 2F 5C 5F
	   5F 20 20 5F 5C
	   20 20 20 20 2F
	   5C 5F 5F 20 20
	   5F 5C 20 2F 5C
	   20 5C 5F 5C 20
	   5C 20 20 20 2F
	   5C 20 20 5F 5F
	   5F 5C 20 20 20
	   20 20 20 2F 5C
	   20 5C 2F 20 2F
	   20 20 20 20 2F
	   5C 20 20 5F 5F
	   5F 5C 20 20 20
	   2F 5C 20 5C 5F
	   5C 20 5C 20 0D
	   0A 00
 000000D1 5C 20 5C 20 5C	logo3 byte '\ \ \__ \  \ \  __\   \/_/\ \/    \/_/\ \/ \ \  __ \  \ \  __\      \ \  _"-.  \ \  __\   \ \____ \',0dh,0ah,0
	   5F 5F 20 5C 20
	   20 5C 20 5C 20
	   20 5F 5F 5C 20
	   20 20 5C 2F 5F
	   2F 5C 20 5C 2F
	   20 20 20 20 5C
	   2F 5F 2F 5C 20
	   5C 2F 20 5C 20
	   5C 20 20 5F 5F
	   20 5C 20 20 5C
	   20 5C 20 20 5F
	   5F 5C 20 20 20
	   20 20 20 5C 20
	   5C 20 20 5F 22
	   2D 2E 20 20 5C
	   20 5C 20 20 5F
	   5F 5C 20 20 20
	   5C 20 5C 5F 5F
	   5F 5F 20 5C 0D
	   0A 00
 00000137 20 5C 20 5C 5F	logo4 byte ' \ \_____\  \ \_____\    \ \_\       \ \_\  \ \_\ \_\  \ \_____\     \ \_\ \_\  \ \_____\  \/\_____\ ',0dh,0ah,0
	   5F 5F 5F 5F 5C
	   20 20 5C 20 5C
	   5F 5F 5F 5F 5F
	   5C 20 20 20 20
	   5C 20 5C 5F 5C
	   20 20 20 20 20
	   20 20 5C 20 5C
	   5F 5C 20 20 5C
	   20 5C 5F 5C 20
	   5C 5F 5C 20 20
	   5C 20 5C 5F 5F
	   5F 5F 5F 5C 20
	   20 20 20 20 5C
	   20 5C 5F 5C 20
	   5C 5F 5C 20 20
	   5C 20 5C 5F 5F
	   5F 5F 5F 5C 20
	   20 5C 2F 5C 5F
	   5F 5F 5F 5F 5C
	   20 0D 0A 00
 0000019F 20 20 5C 2F 5F	logo5 byte '  \/_____/   \/_____/     \/_/        \/_/   \/_/\/_/   \/_____/      \/_/\/_/   \/_____/   \/_____/ ',0dh,0ah,0
	   5F 5F 5F 5F 2F
	   20 20 20 5C 2F
	   5F 5F 5F 5F 5F
	   2F 20 20 20 20
	   20 5C 2F 5F 2F
	   20 20 20 20 20
	   20 20 20 5C 2F
	   5F 2F 20 20 20
	   5C 2F 5F 2F 5C
	   2F 5F 2F 20 20
	   20 5C 2F 5F 5F
	   5F 5F 5F 2F 20
	   20 20 20 20 20
	   5C 2F 5F 2F 5C
	   2F 5F 2F 20 20
	   20 5C 2F 5F 5F
	   5F 5F 5F 2F 20
	   20 20 5C 2F 5F
	   5F 5F 5F 5F 2F
	   20 0D 0A 00

 = 00000024			mapHeight = 36
 = 00000062			mapWidth = 98 ; LENGHTOF logo1 = 98

 = 00000E90			BUFSIZE = mapHeight*mapWidth + 200 ; tamanho do mapa mais o tamanho do enigma+resposta
 00000207  00000E90 [		BUFFERMAPA BYTE BUFSIZE DUP (?)
	    00
	   ]
 00001097  00000DC8 [		mapMatrix BYTE BUFSIZE-200 DUP (?) ; retira 200 referente a parte do enigma
	    00
	   ]
 00001E5F 6E 69 76 65 6C	mapaFileName BYTE 'nivel1.mapa',0
	   31 2E 6D 61 70
	   61 00

				;Estrutura Player
 00001E6B FE			playerSymbol BYTE 0FEh ; Armazena o caracter que representa o jogador
 00001E6C 00			playerX BYTE ? ; Posicao X do jogador na tela
 00001E6D 00			playerXAux BYTE ?
 00001E6E 00			playerY BYTE ? ; Posicao Y do jogador na tela
 00001E6F 00			playerYAux BYTE ?
 00001E70  00000004 [		dispositivos BYTE 4 DUP (?) ; Como fazer para checar se esta num dispositivo (uma solucao e armazenar o offset na matriz)
	    00
	   ]

				; Estrutura Enigma
 00001E74  00000096 [		enigma BYTE 150 DUP (?)
	    00
	   ]
 00001F0A  00000004 [		respostaOriginal BYTE 4 DUP(?)
	    00
	   ]
 00001F0E  00000004 [		respostaJogador BYTE 4 DUP(?)
	    00
	   ]

 00000000			.code
 00000000			main PROC

 00000000			INICIALIZADOR: ; Configuracoes iniciais
 00000000  E8 0000021C			call LoadMapaFile
 00000005  E8 00000000 E		call ReadChar ; Espera para ajustar a tela, será substituido por outro funçao
 0000000A  E8 00000000 E		call GetMaxXY ; Pega o tamanho do terminal atual para configurar as posicoes na tela
 0000000F  80 EA 65			sub dl, LENGTHOF logo1
 00000012  D0 EA			shr dl,1
 00000014  88 15 00000000 R		mov Xmargin,dl ; Calcula a magem esquerda em funcao do tamanho da tela e do logo, dessa forma o jogo sempre estará centralizado

 0000001A  E8 00000281			call DrawLogo ; Desenha o logo do jogo 
 0000001F  E8 00000360			call DrawEnigma ; Desenha o local onde ficara o enigma e o proprio enigma (temos que resolver isso)
 00000024  E8 000003F9			call DrawMapa ; Desenha o mapa do labirinto
 00000029  A0 00000002 R		mov al, BYTE PTR minMap ; Coloca o jogador em uma posicao predefinida no inicio (mudar essa parte em funcao do mapa)
 0000002E  FE C0			inc al
 00000030  A2 00001E6C R		mov playerX, al
 00000035  A0 00000003 R		mov al, BYTE PTR minMap+1
 0000003A  FE C0			inc al
 0000003C  A2 00001E6E R		mov playerY, al
 00000041  E8 00000177			call DrawPlayer ; Desenha o jogador na tela na posicao configurada
 00000046			MAINLOOP:
 00000046  E8 00000000 E		call ReadKey ; Le do teclado alguma tecla
 0000004B  74 05			jz FIM ; Se nao fou apertada nenhuma tecla, pula para o fim da iteracao atual
 0000004D  E8 0000004B			call HandleControl ; Caso contrario e realizada uma acao em funcao da tecla apertada
 00000052			FIM:
 00000052  B8 00000032			mov eax, 50 ; Configura um delay de 50 milisegundos, isso garante que o jogo nao exija muita da cpu de forma desnecessaria e
								; cause bugs na leitura das teclas
 00000057  E8 00000000 E		call delay
 0000005C  EB E8			jmp MAINLOOP ; Executa o loop principal do jogo
				exit
 0000005E  6A 00	   *	    push   +000000000h
 00000060  E8 00000000 E   *	    call   ExitProcess
 00000065			main ENDP

				;---------------------------------------------------
 00000065			GetElementoMatriz PROC
				;
				; Gerencia o controle do jogo executando a operacao correta em funcao da tecla apertada
				; Recebe: nada
				; Retorna: al com o elemento encontrado
				;---------------------------------------------------
 00000065  55				push ebp
 00000066  8B EC			mov ebp,esp

 00000068  B8 00000000			mov eax, 0

 0000006D  66| 8B 45 0A			mov ax, [ebp + 10] ; Y
 00000071  66| 8B 5D 08			mov bx, [ebp + 8] ; X

 00000075  2A 05 00000003 R		sub al, BYTE PTR minMap+1
 0000007B  FE C8			dec al

 0000007D  2A 1D 00000002 R		sub bl, BYTE PTR minMap
 00000083  FE CB			dec bl

 00000085  B1 62			mov cl, 98
 00000087  F6 E1			mul cl ; AX = Y * 98

 00000089  66| 0F B6 CB			movzx cx, bl
 0000008D  66| 03 C1			add ax, cx


 00000090  BE 00001097 R		mov esi, OFFSET mapMatrix
 00000095  03 F0			add esi, eax
 00000097  8A 06			mov al, [esi]

 00000099  5D				pop ebp
 0000009A  C2 0004			ret 4
 0000009D			GetElementoMatriz ENDP

				;---------------------------------------------------
 0000009D			HandleControl PROC
				;
				; Gerencia o controle do jogo executando a operacao correta em funcao da tecla apertada
				; Recebe: eax = tecla que foi acionada
				; Retorna: 
				;---------------------------------------------------
					
 0000009D  80 FC 48			cmp ah, 48h ; Verifica se foi a tecla de seta pra cima
 000000A0  74 18			je UP
 000000A2  80 FC 50			cmp ah, 50h ; Seta para baixo
 000000A5  74 46			je Down
 000000A7  80 FC 4D			cmp ah, 4dh ; Seta para a direita
 000000AA  0F 84 0000009D		je Right
 000000B0  80 FC 4B			cmp ah, 4bh ; Seta para a esquerda
 000000B3  74 68			je Left
 000000B5  E9 000000FD			jmp fim ; Se nao foi nenhuma das alternativas, o processo e encerrado
 000000BA			UP:
 000000BA  8A 1D 00000003 R		mov bl, BYTE PTR minMap+1 ; Recupera o valor do limite do mapa
 000000C0  FE C3			inc bl
 000000C2  38 1D 00001E6E R		cmp playerY, bl ; Se o movimento fizer com que o jogador ultrapasse o limite do mapa, esse movimento nao e realizado
 000000C8  0F 84 000000E9		je fim

 000000CE  8A 0D 00001E6C R		mov cl, playerX
 000000D4  88 0D 00001E6D R		mov playerXAux, cl

 000000DA  8A 0D 00001E6E R		mov cl, playerY
 000000E0  FE C9			dec cl
 000000E2  88 0D 00001E6F R		mov playerYAux, cl

 000000E8  E9 0000008C			jmp VerificaColisaoLabirinto
 000000ED			DOWN:
 000000ED  8A 1D 00000005 R		mov bl, BYTE PTR maxMap+1
 000000F3  FE CB			dec bl
 000000F5  38 1D 00001E6E R		cmp playerY, bl
 000000FB  0F 84 000000B6		je fim

 00000101  8A 0D 00001E6C R		mov cl, playerX
 00000107  88 0D 00001E6D R		mov playerXAux, cl

 0000010D  8A 0D 00001E6E R		mov cl, playerY
 00000113  FE C1			inc cl
 00000115  88 0D 00001E6F R		mov playerYAux, cl

 0000011B  EB 5C			jmp VerificaColisaoLabirinto
 0000011D			Left:
 0000011D  8A 1D 00000002 R		mov bl, BYTE PTR minMap
 00000123  FE C3			inc bl
 00000125  38 1D 00001E6C R		cmp playerX, bl
 0000012B  0F 84 00000086		je fim

 00000131  8A 0D 00001E6C R		mov cl, playerX
 00000137  FE C9			dec cl
 00000139  88 0D 00001E6D R		mov playerXAux, cl

 0000013F  8A 0D 00001E6E R		mov cl, playerY
 00000145  88 0D 00001E6F R		mov playerYAux, cl

 0000014B  EB 2C			jmp VerificaColisaoLabirinto
 0000014D			Right:
 0000014D  8A 1D 00000004 R		mov bl, BYTE PTR maxMap
 00000153  FE CB			dec bl
 00000155  38 1D 00001E6C R		cmp playerX, bl
 0000015B  74 5A			je fim

 0000015D  8A 0D 00001E6C R		mov cl, playerX
 00000163  FE C1			inc cl
 00000165  88 0D 00001E6D R		mov playerXAux, cl

 0000016B  8A 0D 00001E6E R		mov cl, playerY
 00000171  88 0D 00001E6F R		mov playerYAux, cl

 00000177  EB 00			jmp VerificaColisaoLabirinto

 00000179			VerificaColisaoLabirinto:
					; Verifica se há colisão com os elementos da matriz
 00000179  66| 0F B6 0D			movzx cx, playerYAux
	   00001E6F R
					;dec cx
 00000181  66| 51			push cx
 00000183  66| 0F B6 0D			movzx cx, playerXAux
	   00001E6D R
 0000018B  66| 51			push cx
 0000018D  E8 FFFFFED3			call GetElementoMatriz

					.IF al == 0dbh
 00000192  3C DB	   *	    cmp    al, 0DBh
 00000194  75 04	   *	    jne    @C0001
 00000196  EB 1F			jmp fim
					.Else
 00000198  EB 1D	   *	    jmp    @C0003
 0000019A		   *@C0001:
 0000019A  E8 00000050			call ClearPlayer
 0000019F  8A 0D 00001E6D R		mov cl, playerXAux
 000001A5  88 0D 00001E6C R		mov playerX, cl
 000001AB  8A 0D 00001E6F R		mov cl, playerYAux
 000001B1  88 0D 00001E6E R		mov playerY, cl
					.ENDIF
 000001B7		   *@C0003:

 000001B7			Fim:
 000001B7  E8 00000001			call DrawPlayer ; Desenha o jogador na nova posicao
 000001BC  C3				ret
 000001BD			HandleControl ENDP

				;---------------------------------------------------	
 000001BD			DrawPlayer PROC
				;
				; Desenha na tela o jogador em sua posicao atual
				; Recebe: Nada
				; Retorna: Nada
				;---------------------------------------------------	
 000001BD  E8 00000000 E		call GetTextColor
 000001C2  50			    push eax

 000001C3  8A 15 00001E6C R		mov dl, playerX
 000001C9  8A 35 00001E6E R		mov dh, playerY
 000001CF  E8 00000000 E		call GoToxy

 000001D4  B8 0000000B			mov eax,lightcyan
 000001D9  E8 00000000 E		call settextcolor
 000001DE  A0 00001E6B R		mov al, playerSymbol
 000001E3  E8 00000000 E		call WriteChar

 000001E8  58				pop eax
 000001E9  E8 00000000 E		call settextcolor

 000001EE  C3				ret
 000001EF			DrawPlayer ENDP

				;---------------------------------------------------	
 000001EF			ClearPlayer PROC
				;
				; Limpa a posicao antiga do jogador, evita que forme um rastro na tela devido ao movimento do jogador
				; Recebe: Nada
				; Retorna: Nada
				;---------------------------------------------------
 000001EF  E8 00000000 E		call GetTextColor
 000001F4  50			    push eax

 000001F5  8A 15 00001E6C R		mov dl, playerX
 000001FB  8A 35 00001E6E R		mov dh, playerY
 00000201  E8 00000000 E		call GoToxy

 00000206  B8 00000000			mov eax,black
 0000020B  E8 00000000 E		call settextcolor
 00000210  A0 00001E6B R		mov al, playerSymbol
 00000215  E8 00000000 E		call WriteChar

 0000021A  58				pop eax
 0000021B  E8 00000000 E		call settextcolor
 00000220  C3				ret
 00000221			ClearPlayer ENDP

				;---------------------------------------------------
 00000221			LoadMapaFile PROC
				;
				; Carrega na memoria um mapa
				; Recebe: ? 
				; Retorna: ?
				;---------------------------------------------------
				; Abertura do arquivo	
 00000221  BA 00001E5F R		mov edx, OFFSET mapaFileName 
 00000226  E8 00000000 E		call OpenInputFile

 0000022B  BA 00000207 R	    mov  edx,OFFSET BUFFERMAPA
 00000230  B9 00000E90		    mov  ecx,BUFSIZE
 00000235  E8 00000000 E	    call ReadFromFile
				    ;jc   show_error_message
				    ;mov  bytesRead,eax

				; Recupera as informacoes sobre a pergunta e o enigma 
 0000023A  BA 00000207 R		mov edx,OFFSET BUFFERMAPA
 0000023F  B8 00001E74 R		mov eax, OFFSET enigma
				; Identifica a pergunta
 00000244			PerguntaInicio:
 00000244  8A 0A			mov cl, [edx]
 00000246  80 F9 23			cmp cl,'#'
 00000249  74 06			je PerguntaFim
 0000024B  88 08			mov [eax], cl
 0000024D  40				inc eax
 0000024E  42				inc edx
 0000024F  EB F3			jmp PerguntaInicio
 00000251			PerguntaFim:
					
 00000251  42				inc edx
 00000252  B8 00001F0A R		mov eax, OFFSET respostaOriginal
				; Identifica a resposta
 00000257			RespostaInicio:
 00000257  8A 0A			mov cl, [edx]
 00000259  80 F9 23			cmp cl,'#'
 0000025C  74 06			je RespostaFim
 0000025E  88 08			mov [eax], cl
 00000260  40				inc eax
 00000261  42				inc edx
 00000262  EB F3			jmp RespostaInicio
 00000264			RespostaFim:

 00000264  83 C2 03			add edx,3
 00000267  B8 00001097 R		mov eax, OFFSET mapMatrix
 0000026C  BB 00000DC8			mov ebx, mapHeight*mapWidth

				; Inicializa a matriz do mapa
 00000271			MapaInicio:
 00000271  8A 0A			mov cl, [edx]
					
 00000273  80 F9 0D			cmp cl, 0dh
 00000276  75 05			jne ColocaNaMatriz

					;Teste
					;push eax
					;mov al, 0dh
					;call WriteChar
					;mov al, 0ah
					;call WriteChar
					;pop eax
					;Teste

 00000278  83 C2 02			add edx, 2
 0000027B  EB F4			jmp MapaInicio

 0000027D			ColocaNaMatriz:
					.IF cl == 'x'
 0000027D  80 F9 78	   *	    cmp    cl, 'x'
 00000280  75 04	   *	    jne    @C0004
 00000282  B1 DB			mov cl, 0dbh
					.ELSEIF cl == 'p'
 00000284  EB 10	   *	    jmp    @C0006
 00000286		   *@C0004:
 00000286  80 F9 70	   *	    cmp    cl, 'p'
 00000289  75 04	   *	    jne    @C0007
 0000028B  B1 BA			mov cl, 0bah
					.ELSEIF cl == 'c'
 0000028D  EB 07	   *	    jmp    @C0009
 0000028F		   *@C0007:
 0000028F  80 F9 63	   *	    cmp    cl, 'c'
 00000292  75 02	   *	    jne    @C000A
 00000294  B1 FE			mov cl, 0feh
					.ENDIF
 00000296		   *@C000A:
 00000296		   *@C0009:
 00000296		   *@C0006:
					
					;Teste
					;push eax
					;mov al, cl
					;call WriteChar
					;pop eax
					;Teste

 00000296  88 08			mov [eax], cl
 00000298  40				inc eax
 00000299  42				inc edx
 0000029A  4B				dec ebx
 0000029B  74 02			jz MapaFim
 0000029D  EB D2			jmp MapaInicio

 0000029F			MapaFim:
 0000029F  C3				ret
 000002A0			LoadMapaFile ENDP

				;---------------------------------------------------
 000002A0			DrawLogo PROC
				;
				; Desenha na tela o logo do jogo
				; Recebe: ?
				; Retorna: ?
				;---------------------------------------------------
 000002A0  E8 00000000 E		call GetTextColor
 000002A5  50			    push eax
					
 000002A6  B8 00000009			mov eax,lightblue
 000002AB  E8 00000000 E		call settextcolor

 000002B0  8A 15 00000000 R		mov dl, Xmargin
 000002B6  8A 35 00000001 R		mov dh,CurrentLine
 000002BC  FE 05 00000001 R		inc CurrentLine
 000002C2  E8 00000000 E		call GoToxy
 000002C7  BA 00000006 R		mov edx, offset logo1
 000002CC  E8 00000000 E		call writestring

 000002D1  B8 00000009			mov eax,lightblue
 000002D6  E8 00000000 E		call settextcolor

 000002DB  8A 15 00000000 R		mov dl, Xmargin
 000002E1  8A 35 00000001 R		mov dh,CurrentLine
 000002E7  FE 05 00000001 R		inc CurrentLine
 000002ED  E8 00000000 E		call GoToxy
 000002F2  BA 0000006B R		mov edx, offset logo2
 000002F7  E8 00000000 E		call writestring

 000002FC  B8 0000000B			mov eax,lightcyan
 00000301  E8 00000000 E		call settextcolor

 00000306  8A 15 00000000 R		mov dl, Xmargin
 0000030C  8A 35 00000001 R		mov dh,CurrentLine
 00000312  FE 05 00000001 R		inc CurrentLine
 00000318  E8 00000000 E		call GoToxy
 0000031D  BA 000000D1 R		mov edx, offset logo3
 00000322  E8 00000000 E		call writestring

 00000327  B8 0000000A			mov eax,lightgreen
 0000032C  E8 00000000 E		call settextcolor

 00000331  8A 15 00000000 R		mov dl, Xmargin
 00000337  8A 35 00000001 R		mov dh,CurrentLine
 0000033D  FE 05 00000001 R		inc CurrentLine
 00000343  E8 00000000 E		call GoToxy
 00000348  BA 00000137 R		mov edx, offset logo4
 0000034D  E8 00000000 E		call writestring

 00000352  B8 00000003			mov eax,cyan
 00000357  E8 00000000 E		call settextcolor

 0000035C  8A 15 00000000 R		mov dl, Xmargin
 00000362  8A 35 00000001 R		mov dh,CurrentLine
 00000368  FE 05 00000001 R		inc CurrentLine
 0000036E  E8 00000000 E		call GoToxy
 00000373  BA 0000019F R		mov edx, offset logo5
 00000378  E8 00000000 E		call writestring

 0000037D  58				pop eax
 0000037E  E8 00000000 E		call settextcolor

 00000383  C3				ret
 00000384			DrawLogo ENDP

				;---------------------------------------------------
 00000384			DrawEnigma PROC
				;
				; Desenha na tela o local enigma e o enigma propriamente dito
				; Recebe: ? 
				; Retorna: ?
				;---------------------------------------------------
 00000384  B0 2B			mov al, '+'
 00000386  B9 00000064			mov ecx, LENGTHOF logo1 - 1
 0000038B  FE 05 00000001 R		inc CurrentLine
 00000391  8A 15 00000000 R		mov dl,Xmargin
 00000397  8A 35 00000001 R		mov dh,CurrentLine
 0000039D  FE 05 00000001 R		inc CurrentLine
 000003A3  E8 00000000 E		call GoToxy 
 000003A8			L1:
 000003A8  E8 00000000 E		call WriteChar
 000003AD  E2 F9			loop L1

 000003AF  8A 15 00000000 R		mov dl,Xmargin
 000003B5  8A 35 00000001 R		mov dh,CurrentLine
 000003BB  E8 00000000 E		call GoToxy
 000003C0  E8 00000000 E		call WriteChar
 000003C5  B9 00000005			mov ecx, 5 ;Espacamento esquerdo para comecar a escrever a pergunta
 000003CA  B0 20			mov al, ' '
 000003CC			L2:
 000003CC  E8 00000000 E		call WriteChar
 000003D1  E2 F9			loop L2

 000003D3  BA 00001E74 R		mov edx, OFFSET enigma
 000003D8  E8 00000000 E		call WriteString

 000003DD  8A 15 00000000 R		mov dl,Xmargin
 000003E3  8A 35 00000001 R		mov dh,CurrentLine
 000003E9  80 C2 63			add dl, 99 ; Aponta para o final da linha do meio da caixa do enigma
 000003EC  E8 00000000 E		call GoToxy
 000003F1  B0 2B			mov al, '+'
 000003F3  E8 00000000 E		call WriteChar

 000003F8  FE 05 00000001 R		inc CurrentLine
 000003FE  B9 00000064			mov ecx, LENGTHOF logo1 - 1
 00000403  8A 15 00000000 R		mov dl,Xmargin
 00000409  8A 35 00000001 R		mov dh,CurrentLine
 0000040F  FE 05 00000001 R		inc CurrentLine
 00000415  E8 00000000 E		call GoToxy 
 0000041A			L3:
 0000041A  E8 00000000 E		call WriteChar
 0000041F  E2 F9			loop L3
 00000421  C3				ret
 00000422			DrawEnigma ENDP

				;---------------------------------------------------
 00000422			DrawMapa PROC
				;
				; Desenha na tela o mapa do labirinto
				; Recebe: ? 
				; Retorna: ?
				;---------------------------------------------------
 00000422  E8 00000000 E		call GetTextColor
 00000427  50				push eax
 00000428  B8 0000000F			mov eax,white
 0000042D  E8 00000000 E		call settextcolor

 00000432  B0 DB			mov al, 0dbh
 00000434  B9 00000064			mov ecx, mapWidth + 2
 00000439  FE 05 00000001 R		inc CurrentLine
 0000043F  8A 15 00000000 R		mov dl,Xmargin
 00000445  8A 35 00000001 R		mov dh,CurrentLine
 0000044B  66| 89 15			mov minMap,dx
	   00000002 R
 00000452  FE 05 00000001 R		inc CurrentLine
 00000458  E8 00000000 E		call GoToxy
 0000045D			ParedeDeCima:
 0000045D  E8 00000000 E		call WriteChar
 00000462  E2 F9			loop ParedeDeCima

 00000464  BB 00001097 R		mov ebx, OFFSET mapMatrix

 00000469  B0 DB			mov al, 0dbh
 0000046B  B9 00000024			mov ecx, mapHeight
 00000470			Labirinto:
 00000470  8A 15 00000002 R		mov dl, BYTE PTR minMap
 00000476  8A 35 00000001 R		mov dh, CurrentLine
 0000047C  E8 00000000 E		call GoToxy
 00000481  E8 00000000 E		call WriteChar; Inicio parede externa esquerda

 00000486  51				push ecx
 00000487  B9 00000062			mov ecx, mapWidth
 0000048C  E8 00000000 E		call GetTextColor
 00000491  50				push eax
 00000492  B8 00000008			mov eax,gray
 00000497  E8 00000000 E		call settextcolor
 0000049C				LabirintoInterno:
 0000049C  8A 03				mov al, [ebx]
						.IF al == 0bah
 0000049E  3C BA	   *	    cmp    al, 0BAh
 000004A0  75 1F	   *	    jne    @C000C
 000004A2  E8 00000000 E				call GetTextColor
 000004A7  50						push eax
 000004A8  B8 0000000C					mov eax,lightRed
 000004AD  E8 00000000 E				call settextcolor
 000004B2  B0 BA					mov al, 0bah
 000004B4  E8 00000000 E				call WriteChar
 000004B9  58						pop eax
 000004BA  E8 00000000 E				call settextcolor
						.ELSEIF al == 0feh
 000004BF  EB 28	   *	    jmp    @C000E
 000004C1		   *@C000C:
 000004C1  3C FE	   *	    cmp    al, 0FEh
 000004C3  75 1F	   *	    jne    @C000F
 000004C5  E8 00000000 E				call GetTextColor
 000004CA  50						push eax
 000004CB  B8 0000000A					mov eax,lightgreen
 000004D0  E8 00000000 E				call settextcolor
 000004D5  B0 FE					mov al, 0feh
 000004D7  E8 00000000 E				call WriteChar
 000004DC  58						pop eax
 000004DD  E8 00000000 E				call settextcolor
						.ELSE
 000004E2  EB 05	   *	    jmp    @C0011
 000004E4		   *@C000F:
 000004E4  E8 00000000 E				call WriteChar
						.ENDIF
 000004E9		   *@C0011:
 000004E9		   *@C000E:
						
 000004E9  43					inc ebx
 000004EA  E2 B0				loop LabirintoInterno
 000004EC  58				pop eax
 000004ED  E8 00000000 E		call settextcolor
 000004F2  59				pop ecx

 000004F3  B0 DB			mov al, 0dbh
 000004F5  E8 00000000 E		call WriteChar; Inicio parede externa esquerda
 000004FA  FE 05 00000001 R		inc CurrentLine
 00000500  66| 49			dec cx
 00000502  0F 85 FFFFFF68		jnz Labirinto

 00000508  B0 DB			mov al, 0dbh
 0000050A  B9 00000064			mov ecx, mapWidth + 2
 0000050F  8A 15 00000000 R		mov dl,Xmargin
 00000515  8A 35 00000001 R		mov dh,CurrentLine
 0000051B  E8 00000000 E		call GoToxy
 00000520			L3:
 00000520  E8 00000000 E		call WriteChar
 00000525  E2 F9			loop L3

 00000527  8A 15 00000000 R		mov dl, Xmargin
 0000052D  80 C2 63			add dl, mapWidth + 1
 00000530  66| 89 15			mov maxMap,dx
	   00000004 R

 00000537  58				pop eax

 00000538  C3				ret
 00000539			DrawMapa ENDP

				END main
Microsoft (R) Macro Assembler Version 12.00.21005.1	    02/03/17 00:24:31
getTheKey.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001F12 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000539 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ClearPlayer  . . . . . . . . . .	P Near	 000001EF _TEXT	Length= 00000032 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawEnigma . . . . . . . . . . .	P Near	 00000384 _TEXT	Length= 0000009E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000003A8 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000003CC _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000041A _TEXT	
DrawLogo . . . . . . . . . . . .	P Near	 000002A0 _TEXT	Length= 000000E4 Public STDCALL
DrawMapa . . . . . . . . . . . .	P Near	 00000422 _TEXT	Length= 00000117 Public STDCALL
  ParedeDeCima . . . . . . . . .	L Near	 0000045D _TEXT	
  Labirinto  . . . . . . . . . .	L Near	 00000470 _TEXT	
  LabirintoInterno . . . . . . .	L Near	 0000049C _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000520 _TEXT	
DrawPlayer . . . . . . . . . . .	P Near	 000001BD _TEXT	Length= 00000032 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetElementoMatriz  . . . . . . .	P Near	 00000065 _TEXT	Length= 00000038 Public STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HandleControl  . . . . . . . . .	P Near	 0000009D _TEXT	Length= 00000120 Public STDCALL
  UP . . . . . . . . . . . . . .	L Near	 000000BA _TEXT	
  DOWN . . . . . . . . . . . . .	L Near	 000000ED _TEXT	
  Left . . . . . . . . . . . . .	L Near	 0000011D _TEXT	
  Right  . . . . . . . . . . . .	L Near	 0000014D _TEXT	
  VerificaColisaoLabirinto . . .	L Near	 00000179 _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 000001B7 _TEXT	
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadMapaFile . . . . . . . . . .	P Near	 00000221 _TEXT	Length= 0000007F Public STDCALL
  PerguntaInicio . . . . . . . .	L Near	 00000244 _TEXT	
  PerguntaFim  . . . . . . . . .	L Near	 00000251 _TEXT	
  RespostaInicio . . . . . . . .	L Near	 00000257 _TEXT	
  RespostaFim  . . . . . . . . .	L Near	 00000264 _TEXT	
  MapaInicio . . . . . . . . . .	L Near	 00000271 _TEXT	
  ColocaNaMatriz . . . . . . . .	L Near	 0000027D _TEXT	
  MapaFim  . . . . . . . . . . .	L Near	 0000029F _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000065 Public STDCALL
  INICIALIZADOR  . . . . . . . .	L Near	 00000000 _TEXT	
  MAINLOOP . . . . . . . . . . .	L Near	 00000046 _TEXT	
  FIM  . . . . . . . . . . . . .	L Near	 00000052 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFERMAPA . . . . . . . . . . .	Byte	 00000207 _DATA	
BUFSIZE  . . . . . . . . . . . .	Number	 00000E90h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CurrentLine  . . . . . . . . . .	Byte	 00000001 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
Xmargin  . . . . . . . . . . . .	Byte	 00000000 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dispositivos . . . . . . . . . .	Byte	 00001E70 _DATA	
enigma . . . . . . . . . . . . .	Byte	 00001E74 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
logo1  . . . . . . . . . . . . .	Byte	 00000006 _DATA	
logo2  . . . . . . . . . . . . .	Byte	 0000006B _DATA	
logo3  . . . . . . . . . . . . .	Byte	 000000D1 _DATA	
logo4  . . . . . . . . . . . . .	Byte	 00000137 _DATA	
logo5  . . . . . . . . . . . . .	Byte	 0000019F _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
mapHeight  . . . . . . . . . . .	Number	 00000024h   
mapMatrix  . . . . . . . . . . .	Byte	 00001097 _DATA	
mapWidth . . . . . . . . . . . .	Number	 00000062h   
mapaFileName . . . . . . . . . .	Byte	 00001E5F _DATA	
maxMap . . . . . . . . . . . . .	Word	 00000004 _DATA	
minMap . . . . . . . . . . . . .	Word	 00000002 _DATA	
playerSymbol . . . . . . . . . .	Byte	 00001E6B _DATA	
playerXAux . . . . . . . . . . .	Byte	 00001E6D _DATA	
playerX  . . . . . . . . . . . .	Byte	 00001E6C _DATA	
playerYAux . . . . . . . . . . .	Byte	 00001E6F _DATA	
playerY  . . . . . . . . . . . .	Byte	 00001E6E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
respostaJogador  . . . . . . . .	Byte	 00001F0E _DATA	
respostaOriginal . . . . . . . .	Byte	 00001F0A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
