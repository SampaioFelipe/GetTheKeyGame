Microsoft (R) Macro Assembler Version 12.00.21005.1	    02/04/17 16:28:58
getTheKey.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 00			Xmargin BYTE ? ; Margem da lateral esquerda usada para centralizar o ambiente do jogo
 00000001 00			CurrentLine BYTE 0 ; Auxilia na contagem de linhas ao desenhar o cenario
 00000002 00			CurrentColumn BYTE 0;
 00000003 0000			minMap WORD ? ; Limite minimo do espaco onde o jogador pode se locomover
							  ; Formato (Limite X | Limite Y)
 00000005 0000			maxMap WORD ? ; Limite maximo do espaco onde o jogador pode se locomover
							  ; Formato (Limite X | Limite Y)

 00000007 20 5F 5F 5F 5F	logo1 byte ' ______     ______     ______      ______   __  __     ______        __  __     ______     __  __ ',0dh,0ah,0
	   5F 5F 20 20 20
	   20 20 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 5F
	   5F 20 20 5F 5F
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 5F
	   5F 20 20 5F 5F
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 5F 5F 20 20
	   5F 5F 20 0D 0A
	   00
 0000006C 2F 5C 20 20 5F	logo2 byte '/\  ___\   /\  ___\   /\__  _\    /\__  _\ /\ \_\ \   /\  ___\      /\ \/ /    /\  ___\   /\ \_\ \ ',0dh,0ah,0
	   5F 5F 5C 20 20
	   20 2F 5C 20 20
	   5F 5F 5F 5C 20
	   20 20 2F 5C 5F
	   5F 20 20 5F 5C
	   20 20 20 20 2F
	   5C 5F 5F 20 20
	   5F 5C 20 2F 5C
	   20 5C 5F 5C 20
	   5C 20 20 20 2F
	   5C 20 20 5F 5F
	   5F 5C 20 20 20
	   20 20 20 2F 5C
	   20 5C 2F 20 2F
	   20 20 20 20 2F
	   5C 20 20 5F 5F
	   5F 5C 20 20 20
	   2F 5C 20 5C 5F
	   5C 20 5C 20 0D
	   0A 00
 000000D2 5C 20 5C 20 5C	logo3 byte '\ \ \__ \  \ \  __\   \/_/\ \/    \/_/\ \/ \ \  __ \  \ \  __\      \ \  _"-.  \ \  __\   \ \____ \',0dh,0ah,0
	   5F 5F 20 5C 20
	   20 5C 20 5C 20
	   20 5F 5F 5C 20
	   20 20 5C 2F 5F
	   2F 5C 20 5C 2F
	   20 20 20 20 5C
	   2F 5F 2F 5C 20
	   5C 2F 20 5C 20
	   5C 20 20 5F 5F
	   20 5C 20 20 5C
	   20 5C 20 20 5F
	   5F 5C 20 20 20
	   20 20 20 5C 20
	   5C 20 20 5F 22
	   2D 2E 20 20 5C
	   20 5C 20 20 5F
	   5F 5C 20 20 20
	   5C 20 5C 5F 5F
	   5F 5F 20 5C 0D
	   0A 00
 00000138 20 5C 20 5C 5F	logo4 byte ' \ \_____\  \ \_____\    \ \_\       \ \_\  \ \_\ \_\  \ \_____\     \ \_\ \_\  \ \_____\  \/\_____\ ',0dh,0ah,0
	   5F 5F 5F 5F 5C
	   20 20 5C 20 5C
	   5F 5F 5F 5F 5F
	   5C 20 20 20 20
	   5C 20 5C 5F 5C
	   20 20 20 20 20
	   20 20 5C 20 5C
	   5F 5C 20 20 5C
	   20 5C 5F 5C 20
	   5C 5F 5C 20 20
	   5C 20 5C 5F 5F
	   5F 5F 5F 5C 20
	   20 20 20 20 5C
	   20 5C 5F 5C 20
	   5C 5F 5C 20 20
	   5C 20 5C 5F 5F
	   5F 5F 5F 5C 20
	   20 5C 2F 5C 5F
	   5F 5F 5F 5F 5C
	   20 0D 0A 00
 000001A0 20 20 5C 2F 5F	logo5 byte '  \/_____/   \/_____/     \/_/        \/_/   \/_/\/_/   \/_____/      \/_/\/_/   \/_____/   \/_____/ ',0dh,0ah,0
	   5F 5F 5F 5F 2F
	   20 20 20 5C 2F
	   5F 5F 5F 5F 5F
	   2F 20 20 20 20
	   20 5C 2F 5F 2F
	   20 20 20 20 20
	   20 20 20 5C 2F
	   5F 2F 20 20 20
	   5C 2F 5F 2F 5C
	   2F 5F 2F 20 20
	   20 5C 2F 5F 5F
	   5F 5F 5F 2F 20
	   20 20 20 20 20
	   5C 2F 5F 2F 5C
	   2F 5F 2F 20 20
	   20 5C 2F 5F 5F
	   5F 5F 5F 2F 20
	   20 20 5C 2F 5F
	   5F 5F 5F 5F 2F
	   20 0D 0A 00

 = 00000024			mapHeight = 36
 = 00000062			mapWidth = 98 ; LENGHTOF logo1 = 98

 = 00000E90			BUFSIZE = mapHeight*mapWidth + 200 ; tamanho do mapa mais o tamanho do enigma+resposta
 00000208  00000E90 [		BUFFERMAPA BYTE BUFSIZE DUP (?)
	    00
	   ]
 00001098  00000DC8 [		mapMatrix BYTE BUFSIZE-200 DUP (?) ; retira 200 referente a parte do enigma
	    00
	   ]
 00001E60 6E 69 76 65 6C	mapaFileName BYTE 'nivel1.mapa',0
	   31 2E 6D 61 70
	   61 00
 00001E6C 00			elementoAux BYTE ?

				;Estrutura Player
 00001E6D FE			playerSymbol BYTE 0FEh ; Armazena o caracter que representa o jogador
 00001E6E 00			playerX BYTE ? ; Posicao X do jogador na tela
 00001E6F 00			playerXAux BYTE ?
 00001E70 00			playerY BYTE ? ; Posicao Y do jogador na tela
 00001E71 00			playerYAux BYTE ?
 00001E72  00000004 [		dispositivos BYTE 4 DUP (?) ; Como fazer para checar se esta num dispositivo (uma solucao e armazenar o offset na matriz)
	    00
	   ]

				; Estrutura Enigma
 00001E76  00000096 [		enigma BYTE 150 DUP (?)
	    00
	   ]
 00001F0C 20 52 45 53 50	labelResposta BYTE " RESPOSTA: ",0
	   4F 53 54 41 3A
	   20 00
 = 0000004A			OFFSETRESPOSTA = 74
 00001F18  00000004 [		respostaOriginal BYTE 4 DUP(?)
	    00
	   ]
				;respostaJogador BYTE 4 DUP(?)
 00001F1C 72 65 73 70		respostaJogador BYTE "resp"
 00001F20 00			statusResposta BYTE 0
 00001F21 0000			posRespostaJogador WORD ?

				; Portas
 00001F23  00000004 [		posPortas WORD 4 DUP (?)
	    0000
	   ]

 00000000			.code
 00000000			main PROC

 00000000			INICIALIZADOR: ; Configuracoes iniciais
 00000000  E8 00000485			call LoadMapaFile
 00000005  E8 00000000 E		call ReadChar ; Espera para ajustar a tela, será substituido por outro funçao
					
					;Funcao que chamara o menu, se for selecionado "jogar" prossegue, senao vai para intrucoes
					
 0000000A  E8 00000000 E		call GetMaxXY ; Pega o tamanho do terminal atual para configurar as posicoes na tela
 0000000F  80 EA 65			sub dl, LENGTHOF logo1
 00000012  D0 EA			shr dl,1
 00000014  88 15 00000000 R		mov Xmargin,dl ; Calcula a magem esquerda em funcao do tamanho da tela e do logo, dessa forma o jogo sempre estará centralizado

 0000001A  E8 000004EA			call DrawLogo ; Desenha o logo do jogo 
 0000001F  E8 000005C9			call DrawEnigma ; Desenha o local onde ficara o enigma e o proprio enigma (temos que resolver isso)
 00000024  E8 00000741			call DrawMapa ; Desenha o mapa do labirinto
 00000029  A0 00000003 R		mov al, BYTE PTR minMap ; Coloca o jogador em uma posicao predefinida no inicio (mudar essa parte em funcao do mapa)
 0000002E  FE C0			inc al
 00000030  A2 00001E6E R		mov playerX, al
 00000035  A0 00000004 R		mov al, BYTE PTR minMap+1
 0000003A  FE C0			inc al
 0000003C  A2 00001E70 R		mov playerY, al
 00000041  E8 000003E0			call DrawPlayer ; Desenha o jogador na tela na posicao configurada
 00000046			MAINLOOP:
 00000046  66| 0F B6 0D			movzx cx, playerY
	   00001E70 R
 0000004E  66| 51			push cx
 00000050  66| 0F B6 0D			movzx cx, playerX
	   00001E6E R
 00000058  66| 51			push cx
 0000005A  E8 00000036			call GetElementoMatriz
					.IF al == ' '
 0000005F  3C 20	   *	    cmp    al, ' '
 00000061  75 0E	   *	    jne    @C0001
 00000063  E8 00000000 E			call ReadKey ; Le do teclado alguma tecla
 00000068  74 18				jz FIM ; Se nao foi apertada nenhuma tecla, pula para o fim da iteracao atual
 0000006A  E8 0000005E				call HandleControl ; Caso contrario e realizada uma acao em funcao da tecla apertada
					.ELSE
 0000006F  EB 11	   *	    jmp    @C0003
 00000071		   *@C0001:
 00000071  A2 00001E6C R			mov elementoAux, al ; Coloca em elementoAux o caracter encontrado na posicao onde o jogador esta
 00000076  E8 00000000 E			call ReadKey ; Le do teclado alguma tecla
 0000007B  74 05				jz FIM ; Se nao foi apertada nenhuma tecla, pula para o fim da iteracao atual
 0000007D  E8 0000016F				call HandleSenha
					.ENDIF
 00000082		   *@C0003:
 00000082			FIM:
 00000082  B8 00000032			mov eax, 50 ; Configura um delay de 50 milisegundos, isso garante que o jogo nao exija muita da cpu de forma desnecessaria e
								; cause bugs na leitura das teclas
 00000087  E8 00000000 E		call delay
 0000008C  EB B8			jmp MAINLOOP ; Executa o loop principal do jogo
				exit
 0000008E  6A 00	   *	    push   +000000000h
 00000090  E8 00000000 E   *	    call   ExitProcess
 00000095			main ENDP

				;---------------------------------------------------
 00000095			GetElementoMatriz PROC
				;
				; Mapeia um par ordenado (x,y), passado por parametro, em posicao de memoria da matriz do mapa
				; e recupera o elemento que armazenado nessa posicao
				; Recebe: Par ordenado (x,y) por parametro
				; Retorna: al com o elemento encontrado
				;---------------------------------------------------
 00000095  55				push ebp
 00000096  8B EC			mov ebp,esp

 00000098  B8 00000000			mov eax, 0

 0000009D  66| 8B 45 0A			mov ax, [ebp + 10] ; Y
 000000A1  66| 8B 5D 08			mov bx, [ebp + 8] ; X

 000000A5  2A 05 00000004 R		sub al, BYTE PTR minMap+1
 000000AB  FE C8			dec al

 000000AD  2A 1D 00000003 R		sub bl, BYTE PTR minMap
 000000B3  FE CB			dec bl

 000000B5  B1 62			mov cl, 98
 000000B7  F6 E1			mul cl ; AX = Y * 98

 000000B9  66| 0F B6 CB			movzx cx, bl
 000000BD  66| 03 C1			add ax, cx


 000000C0  BE 00001098 R		mov esi, OFFSET mapMatrix
 000000C5  03 F0			add esi, eax
 000000C7  8A 06			mov al, [esi]

 000000C9  5D				pop ebp
 000000CA  C2 0004			ret 4
 000000CD			GetElementoMatriz ENDP

				;---------------------------------------------------
 000000CD			HandleControl PROC
				; Gerencia o controle do jogo executando a operacao correta em funcao da tecla apertada
				; Recebe: eax = tecla que foi acionada
				; Retorna: Nada
				;---------------------------------------------------
					.IF ah == 48h ; Verifica se foi a tecla de seta pra cima
 000000CD  80 FC 48	   *	    cmp    ah, 048h
 000000D0  75 38	   *	    jne    @C0004
 000000D2  8A 1D 00000004 R			mov bl, BYTE PTR minMap+1 ; Recupera o valor do limite do mapa
 000000D8  FE C3				inc bl
 000000DA  38 1D 00001E70 R			cmp playerY, bl ; Se o movimento fizer com que o jogador ultrapasse o limite do mapa, esse movimento nao e realizado
 000000E0  0F 84 0000010A			je Fim

 000000E6  8A 0D 00001E6E R			mov cl, playerX
 000000EC  88 0D 00001E6F R			mov playerXAux, cl

 000000F2  8A 0D 00001E70 R			mov cl, playerY
 000000F8  FE C9				dec cl
 000000FA  88 0D 00001E71 R			mov playerYAux, cl

 00000100  E9 000000A8				jmp VerificaColisaoLabirinto
					.ELSEIF ah == 50h ; Seta para baixo
 00000105  E9 000000A3	   *	    jmp    @C0006
 0000010A		   *@C0004:
 0000010A  80 FC 50	   *	    cmp    ah, 050h
 0000010D  75 32	   *	    jne    @C0007
 0000010F  8A 1D 00000006 R			mov bl, BYTE PTR maxMap+1
 00000115  FE CB				dec bl
 00000117  38 1D 00001E70 R			cmp playerY, bl
 0000011D  0F 84 000000CD			je Fim

 00000123  8A 0D 00001E6E R			mov cl, playerX
 00000129  88 0D 00001E6F R			mov playerXAux, cl

 0000012F  8A 0D 00001E70 R			mov cl, playerY
 00000135  FE C1				inc cl
 00000137  88 0D 00001E71 R			mov playerYAux, cl

 0000013D  EB 6E				jmp VerificaColisaoLabirinto
					.ELSEIF ah == 4dh ; Seta para a direita
 0000013F  EB 6C	   *	    jmp    @C0009
 00000141		   *@C0007:
 00000141  80 FC 4D	   *	    cmp    ah, 04Dh
 00000144  75 32	   *	    jne    @C000A
 00000146  8A 1D 00000005 R			mov bl, BYTE PTR maxMap
 0000014C  FE CB				dec bl
 0000014E  38 1D 00001E6E R			cmp playerX, bl
 00000154  0F 84 00000096			je Fim

 0000015A  8A 0D 00001E6E R			mov cl, playerX
 00000160  FE C1				inc cl
 00000162  88 0D 00001E6F R			mov playerXAux, cl

 00000168  8A 0D 00001E70 R			mov cl, playerY
 0000016E  88 0D 00001E71 R			mov playerYAux, cl

 00000174  EB 37				jmp VerificaColisaoLabirinto
					.ELSEIF ah == 4bh ; Seta para a esquerda
 00000176  EB 35	   *	    jmp    @C000C
 00000178		   *@C000A:
 00000178  80 FC 4B	   *	    cmp    ah, 04Bh
 0000017B  75 2E	   *	    jne    @C000D
 0000017D  8A 1D 00000003 R			mov bl, BYTE PTR minMap
 00000183  FE C3				inc bl
 00000185  38 1D 00001E6E R			cmp playerX, bl
 0000018B  74 63				je Fim

 0000018D  8A 0D 00001E6E R			mov cl, playerX
 00000193  FE C9				dec cl
 00000195  88 0D 00001E6F R			mov playerXAux, cl

 0000019B  8A 0D 00001E70 R			mov cl, playerY
 000001A1  88 0D 00001E71 R			mov playerYAux, cl

 000001A7  EB 04				jmp VerificaColisaoLabirinto
					;.ELSEIF ah = ;Se for a tecla ESC
					.ELSE
 000001A9  EB 02	   *	    jmp    @C000F
 000001AB		   *@C000D:
 000001AB  EB 43				jmp Fim ;
					.ENDIF	
 000001AD		   *@C000F:
 000001AD		   *@C000C:
 000001AD		   *@C0009:
 000001AD		   *@C0006:

 000001AD			VerificaColisaoLabirinto:
					; Verifica se há colisão com os elementos da matriz
 000001AD  66| 0F B6 0D			movzx cx, playerYAux
	   00001E71 R
 000001B5  66| 51			push cx
 000001B7  66| 0F B6 0D			movzx cx, playerXAux
	   00001E6F R
 000001BF  66| 51			push cx
 000001C1  E8 FFFFFECF			call GetElementoMatriz

					.IF al == 0dbh
 000001C6  3C DB	   *	    cmp    al, 0DBh
 000001C8  75 04	   *	    jne    @C0010
 000001CA  EB 24				jmp fim
					;Aqui eu posso colocar uma verificação do para ver se a senha já está correta, se não estiver bloqueia o movimento da porta também.
					.Else
 000001CC  EB 1D	   *	    jmp    @C0012
 000001CE		   *@C0010:
 000001CE  E8 00000285				call ClearPlayer
 000001D3  8A 0D 00001E6F R			mov cl, playerXAux
 000001D9  88 0D 00001E6E R			mov playerX, cl
 000001DF  8A 0D 00001E71 R			mov cl, playerYAux
 000001E5  88 0D 00001E70 R			mov playerY, cl
					.ENDIF
 000001EB		   *@C0012:

 000001EB  E8 00000236			call DrawPlayer ; Desenha o jogador na nova posicao
 000001F0			Fim:
 000001F0  C3				ret
 000001F1			HandleControl ENDP

				;---------------------------------------------------
 000001F1			HandleSenha PROC
				;
				; ?
				; Recebe: eax = tecla que foi acionada, bl
				; Retorna: Nada
				;---------------------------------------------------
 000001F1  E8 000001D9			call VerificaSenha
					.IF ah == 48h ; Verifica se foi a tecla de seta pra cima
 000001F6  80 FC 48	   *	    cmp    ah, 048h
 000001F9  75 38	   *	    jne    @C0013
 000001FB  8A 1D 00000004 R			mov bl, BYTE PTR minMap+1 ; Recupera o valor do limite do mapa
 00000201  FE C3				inc bl
 00000203  38 1D 00001E70 R			cmp playerY, bl ; Se o movimento fizer com que o jogador ultrapasse o limite do mapa, esse movimento nao e realizado
 00000209  0F 84 000001BF			je Fim

 0000020F  8A 0D 00001E6E R			mov cl, playerX
 00000215  88 0D 00001E6F R			mov playerXAux, cl

 0000021B  8A 0D 00001E70 R			mov cl, playerY
 00000221  FE C9				dec cl
 00000223  88 0D 00001E71 R			mov playerYAux, cl

 00000229  E9 000000EA				jmp VerificaColisaoLabirinto
					.ELSEIF ah == 50h ; Seta para baixo
 0000022E  E9 000000E5	   *	    jmp    @C0015
 00000233		   *@C0013:
 00000233  80 FC 50	   *	    cmp    ah, 050h
 00000236  75 38	   *	    jne    @C0016
 00000238  8A 1D 00000006 R			mov bl, BYTE PTR maxMap+1
 0000023E  FE CB				dec bl
 00000240  38 1D 00001E70 R			cmp playerY, bl
 00000246  0F 84 00000182			je Fim

 0000024C  8A 0D 00001E6E R			mov cl, playerX
 00000252  88 0D 00001E6F R			mov playerXAux, cl

 00000258  8A 0D 00001E70 R			mov cl, playerY
 0000025E  FE C1				inc cl
 00000260  88 0D 00001E71 R			mov playerYAux, cl

 00000266  E9 000000AD				jmp VerificaColisaoLabirinto
					.ELSEIF ah == 4dh ; Seta para a direita
 0000026B  E9 000000A8	   *	    jmp    @C0018
 00000270		   *@C0016:
 00000270  80 FC 4D	   *	    cmp    ah, 04Dh
 00000273  75 32	   *	    jne    @C0019
 00000275  8A 1D 00000005 R			mov bl, BYTE PTR maxMap
 0000027B  FE CB				dec bl
 0000027D  38 1D 00001E6E R			cmp playerX, bl
 00000283  0F 84 00000145			je Fim

 00000289  8A 0D 00001E6E R			mov cl, playerX
 0000028F  FE C1				inc cl
 00000291  88 0D 00001E6F R			mov playerXAux, cl

 00000297  8A 0D 00001E70 R			mov cl, playerY
 0000029D  88 0D 00001E71 R			mov playerYAux, cl

 000002A3  EB 73				jmp VerificaColisaoLabirinto
					.ELSEIF ah == 4bh ; Seta para a esquerda
 000002A5  EB 71	   *	    jmp    @C001B
 000002A7		   *@C0019:
 000002A7  80 FC 4B	   *	    cmp    ah, 04Bh
 000002AA  75 32	   *	    jne    @C001C
 000002AC  8A 1D 00000003 R			mov bl, BYTE PTR minMap
 000002B2  FE C3				inc bl
 000002B4  38 1D 00001E6E R			cmp playerX, bl
 000002BA  0F 84 0000010E			je Fim

 000002C0  8A 0D 00001E6E R			mov cl, playerX
 000002C6  FE C9				dec cl
 000002C8  88 0D 00001E6F R			mov playerXAux, cl

 000002CE  8A 0D 00001E70 R			mov cl, playerY
 000002D4  88 0D 00001E71 R			mov playerYAux, cl

 000002DA  EB 3C				jmp VerificaColisaoLabirinto
					;.ELSEIF ah = ;Se for a tecla ESC
					.ELSE
 000002DC  EB 3A	   *	    jmp    @C001E
 000002DE		   *@C001C:
 000002DE  8A 1D 00001E6C R			mov bl, elementoAux
 000002E4  BA 00001F1C R			mov edx, OFFSET respostaJogador
						.IF bl == '1'
 000002E9  80 FB 31	   *	    cmp    bl, '1'
 000002EC  75 04	   *	    jne    @C001F
 000002EE  88 02					mov [edx], al
						.ELSEIF bl == '2'
 000002F0  EB 1C	   *	    jmp    @C0021
 000002F2		   *@C001F:
 000002F2  80 FB 32	   *	    cmp    bl, '2'
 000002F5  75 05	   *	    jne    @C0022
 000002F7  88 42 01					mov [edx + 1], al
						.ELSEIF bl == '3'
 000002FA  EB 12	   *	    jmp    @C0024
 000002FC		   *@C0022:
 000002FC  80 FB 33	   *	    cmp    bl, '3'
 000002FF  75 05	   *	    jne    @C0025
 00000301  88 42 02					mov [edx + 2], al
						.ELSEIF bl == '4'
 00000304  EB 08	   *	    jmp    @C0027
 00000306		   *@C0025:
 00000306  80 FB 34	   *	    cmp    bl, '4'
 00000309  75 03	   *	    jne    @C0028
 0000030B  88 42 03					mov [edx + 3], al
						.ENDIF
 0000030E		   *@C0028:
 0000030E		   *@C0027:
 0000030E		   *@C0024:
 0000030E		   *@C0021:
 0000030E  E8 000003BA				call DrawRespostaJogador
 00000313  E9 000000B6				jmp Fim ;
					.ENDIF	
 00000318		   *@C001E:
 00000318		   *@C001B:
 00000318		   *@C0018:
 00000318		   *@C0015:

 00000318			VerificaColisaoLabirinto:
					; Verifica se há colisão com os elementos da matriz
 00000318  66| 0F B6 0D			movzx cx, playerYAux
	   00001E71 R
 00000320  66| 51			push cx
 00000322  66| 0F B6 0D			movzx cx, playerXAux
	   00001E6F R
 0000032A  66| 51			push cx
 0000032C  E8 FFFFFD64			call GetElementoMatriz

					.IF al == 0dbh
 00000331  3C DB	   *	    cmp    al, 0DBh
 00000333  75 0A	   *	    jne    @C002A
 00000335  E9 00000094				jmp fim
					.Else
 0000033A  E9 0000008A	   *	    jmp    @C002C
 0000033F		   *@C002A:
 0000033F  8A 15 00001E6E R			mov dl, playerX
 00000345  8A 35 00001E70 R			mov dh, playerY
 0000034B  8A 1D 00001E6C R			mov bl, elementoAux
 00000351  E8 00000000 E			call GetTextColor
 00000356  50					push eax
						.IF bl == '1'
 00000357  80 FB 31	   *	    cmp    bl, '1'
 0000035A  75 0E	   *	    jne    @C002D
 0000035C  B8 0000002F					mov eax,white + (green * 16)
 00000361  E8 00000000 E				call settextcolor
 00000366  B0 31					mov al, '1'
						.ELSEIF bl == '2'
 00000368  EB 37	   *	    jmp    @C002F
 0000036A		   *@C002D:
 0000036A  80 FB 32	   *	    cmp    bl, '2'
 0000036D  75 0E	   *	    jne    @C0030
 0000036F  B8 000000D0					mov eax,black + (lightmagenta * 16)
 00000374  E8 00000000 E				call settextcolor
 00000379  B0 32					mov al, '2'
						.ELSEIF bl == '3'
 0000037B  EB 24	   *	    jmp    @C0032
 0000037D		   *@C0030:
 0000037D  80 FB 33	   *	    cmp    bl, '3'
 00000380  75 0E	   *	    jne    @C0033
 00000382  B8 000000E0					mov eax,black + (yellow * 16)
 00000387  E8 00000000 E				call settextcolor
 0000038C  B0 33					mov al, '3'
						.ELSEIF bl == '4'
 0000038E  EB 11	   *	    jmp    @C0035
 00000390		   *@C0033:
 00000390  80 FB 34	   *	    cmp    bl, '4'
 00000393  75 0C	   *	    jne    @C0036
 00000395  B8 0000009F					mov eax,white + (lightBlue * 16)
 0000039A  E8 00000000 E				call settextcolor
 0000039F  B0 34					mov al, '4'
						.ENDIF
 000003A1		   *@C0036:
 000003A1		   *@C0035:
 000003A1		   *@C0032:
 000003A1		   *@C002F:
 000003A1  E8 00000000 E			call GoToxy

 000003A6  E8 00000000 E			call WriteChar
						
 000003AB  58					pop eax
 000003AC  E8 00000000 E			call settextcolor

						;call ClearPlayer
 000003B1  8A 0D 00001E6F R			mov cl, playerXAux
 000003B7  88 0D 00001E6E R			mov playerX, cl
 000003BD  8A 0D 00001E71 R			mov cl, playerYAux
 000003C3  88 0D 00001E70 R			mov playerY, cl
					.ENDIF
 000003C9		   *@C002C:

 000003C9  E8 00000058			call DrawPlayer ; Desenha o jogador na nova posicao
 000003CE			Fim:
 000003CE  C3				ret
 000003CF			HandleSenha ENDP

				;---------------------------------------------------
 000003CF			VerificaSenha PROC
				; ?
				; Recebe: Nada
				; Retorna: Nada
				;---------------------------------------------------
 000003CF  BE 00001F18 R		mov esi, OFFSET respostaOriginal
 000003D4  BA 00001F1C R		mov edx, OFFSET respostaJogador
 000003D9  B9 00000004			mov ecx, 4
 000003DE			Verifica:
 000003DE  8A 06			mov al, [esi]
 000003E0  8A 1A			mov bl, [edx]
 000003E2  3A C3			cmp al,bl
 000003E4  75 3F			jnz Diferente

 000003E6  46				inc esi
 000003E7  42				inc edx
 000003E8  E2 F4			loop Verifica

 000003EA  E8 00000000 E		call GetTextColor
 000003EF  50			    push eax
 000003F0  B8 000000AA			mov eax,lightgreen + (lightgreen * 16)
 000003F5  E8 00000000 E		call settextcolor

 000003FA  BE 00001F23 R		mov esi, OFFSET posPortas
 000003FF  B9 00000004			mov ecx, 4
 00000404  B0 20			mov al, ' '
 00000406			AbrePorta:
 00000406  66| 8B 16			mov dx, [esi]
 00000409  E8 00000000 E		call GoToXY
 0000040E  E8 00000000 E		call WriteChar
 00000413  83 C6 02			add esi, 2
 00000416  E2 EE			loop AbrePorta

 00000418  58				pop eax
 00000419  E8 00000000 E		call settextcolor

 0000041E  C6 05 00001F20 R		mov statusResposta, 1
	   01

 00000425			Diferente:
 00000425  C3				ret
 00000426			VerificaSenha ENDP

				;---------------------------------------------------
 00000426			DrawPlayer PROC
				;
				; Desenha na tela o jogador em sua posicao atual
				; Recebe: Nada
				; Retorna: Nada
				;---------------------------------------------------
 00000426  E8 00000000 E		call GetTextColor
 0000042B  50			    push eax

 0000042C  8A 15 00001E6E R		mov dl, playerX
 00000432  8A 35 00001E70 R		mov dh, playerY
 00000438  E8 00000000 E		call GoToxy

 0000043D  B8 0000000B			mov eax,lightcyan
 00000442  E8 00000000 E		call settextcolor
 00000447  A0 00001E6D R		mov al, playerSymbol
 0000044C  E8 00000000 E		call WriteChar

 00000451  58				pop eax
 00000452  E8 00000000 E		call settextcolor

 00000457  C3				ret
 00000458			DrawPlayer ENDP

				;---------------------------------------------------	
 00000458			ClearPlayer PROC
				;
				; Limpa a posicao antiga do jogador, evita que forme um rastro na tela devido ao movimento do jogador
				; Recebe: Nada
				; Retorna: Nada
				;---------------------------------------------------
 00000458  E8 00000000 E		call GetTextColor
 0000045D  50			    push eax

 0000045E  8A 15 00001E6E R		mov dl, playerX
 00000464  8A 35 00001E70 R		mov dh, playerY
 0000046A  E8 00000000 E		call GoToxy

 0000046F  B8 00000000			mov eax,black
 00000474  E8 00000000 E		call settextcolor
 00000479  A0 00001E6D R		mov al, playerSymbol
 0000047E  E8 00000000 E		call WriteChar

 00000483  58				pop eax
 00000484  E8 00000000 E		call settextcolor
 00000489  C3				ret
 0000048A			ClearPlayer ENDP

				;---------------------------------------------------
 0000048A			LoadMapaFile PROC
				;
				; Carrega na memoria um mapa
				; Recebe: ? 
				; Retorna: ?
				;---------------------------------------------------
				; Abertura do arquivo	
 0000048A  BA 00001E60 R		mov edx, OFFSET mapaFileName 
 0000048F  E8 00000000 E		call OpenInputFile

 00000494  BA 00000208 R	    mov  edx,OFFSET BUFFERMAPA
 00000499  B9 00000E90		    mov  ecx,BUFSIZE
 0000049E  E8 00000000 E	    call ReadFromFile
				    ;jc   show_error_message
				    ;mov  bytesRead,eax

				; Recupera as informacoes sobre a pergunta e o enigma 
 000004A3  BA 00000208 R		mov edx,OFFSET BUFFERMAPA
 000004A8  B8 00001E76 R		mov eax, OFFSET enigma
				; Identifica a pergunta
 000004AD			PerguntaInicio:
 000004AD  8A 0A			mov cl, [edx]
 000004AF  80 F9 23			cmp cl,'#'
 000004B2  74 06			je PerguntaFim
 000004B4  88 08			mov [eax], cl
 000004B6  40				inc eax
 000004B7  42				inc edx
 000004B8  EB F3			jmp PerguntaInicio
 000004BA			PerguntaFim:
					
 000004BA  42				inc edx
 000004BB  B8 00001F18 R		mov eax, OFFSET respostaOriginal
				; Identifica a resposta
 000004C0			RespostaInicio:
 000004C0  8A 0A			mov cl, [edx]
 000004C2  80 F9 23			cmp cl,'#'
 000004C5  74 06			je RespostaFim
 000004C7  88 08			mov [eax], cl
 000004C9  40				inc eax
 000004CA  42				inc edx
 000004CB  EB F3			jmp RespostaInicio
 000004CD			RespostaFim:

 000004CD  83 C2 03			add edx,3
 000004D0  B8 00001098 R		mov eax, OFFSET mapMatrix
 000004D5  BB 00000DC8			mov ebx, mapHeight*mapWidth

				; Inicializa a matriz do mapa
 000004DA			MapaInicio:
 000004DA  8A 0A			mov cl, [edx]
					
 000004DC  80 F9 0D			cmp cl, 0dh
 000004DF  75 05			jne ColocaNaMatriz

 000004E1  83 C2 02			add edx, 2
 000004E4  EB F4			jmp MapaInicio

 000004E6			ColocaNaMatriz:
					.IF cl == 'x'
 000004E6  80 F9 78	   *	    cmp    cl, 'x'
 000004E9  75 04	   *	    jne    @C0038
 000004EB  B1 DB				mov cl, 0dbh
					.ELSEIF cl == 'p'
 000004ED  EB 10	   *	    jmp    @C003A
 000004EF		   *@C0038:
 000004EF  80 F9 70	   *	    cmp    cl, 'p'
 000004F2  75 04	   *	    jne    @C003B
 000004F4  B1 BA				mov cl, 0bah
					.ELSEIF cl == 'c'
 000004F6  EB 07	   *	    jmp    @C003D
 000004F8		   *@C003B:
 000004F8  80 F9 63	   *	    cmp    cl, 'c'
 000004FB  75 02	   *	    jne    @C003E
 000004FD  B1 FE				mov cl, 0feh
					.ENDIF
 000004FF		   *@C003E:
 000004FF		   *@C003D:
 000004FF		   *@C003A:

 000004FF  88 08			mov [eax], cl
 00000501  40				inc eax
 00000502  42				inc edx
 00000503  4B				dec ebx
 00000504  74 02			jz MapaFim
 00000506  EB D2			jmp MapaInicio

 00000508			MapaFim:
 00000508  C3				ret
 00000509			LoadMapaFile ENDP

				;---------------------------------------------------
 00000509			DrawLogo PROC
				;
				; Desenha na tela o logo do jogo
				; Recebe: ?
				; Retorna: ?
				;---------------------------------------------------
 00000509  E8 00000000 E		call GetTextColor
 0000050E  50			    push eax
					
 0000050F  B8 00000009			mov eax,lightblue
 00000514  E8 00000000 E		call settextcolor

 00000519  8A 15 00000000 R		mov dl, Xmargin
 0000051F  8A 35 00000001 R		mov dh,CurrentLine
 00000525  FE 05 00000001 R		inc CurrentLine
 0000052B  E8 00000000 E		call GoToxy
 00000530  BA 00000007 R		mov edx, offset logo1
 00000535  E8 00000000 E		call writestring

 0000053A  B8 00000009			mov eax,lightblue
 0000053F  E8 00000000 E		call settextcolor

 00000544  8A 15 00000000 R		mov dl, Xmargin
 0000054A  8A 35 00000001 R		mov dh,CurrentLine
 00000550  FE 05 00000001 R		inc CurrentLine
 00000556  E8 00000000 E		call GoToxy
 0000055B  BA 0000006C R		mov edx, offset logo2
 00000560  E8 00000000 E		call writestring

 00000565  B8 0000000B			mov eax,lightcyan
 0000056A  E8 00000000 E		call settextcolor

 0000056F  8A 15 00000000 R		mov dl, Xmargin
 00000575  8A 35 00000001 R		mov dh,CurrentLine
 0000057B  FE 05 00000001 R		inc CurrentLine
 00000581  E8 00000000 E		call GoToxy
 00000586  BA 000000D2 R		mov edx, offset logo3
 0000058B  E8 00000000 E		call writestring

 00000590  B8 0000000A			mov eax,lightgreen
 00000595  E8 00000000 E		call settextcolor

 0000059A  8A 15 00000000 R		mov dl, Xmargin
 000005A0  8A 35 00000001 R		mov dh,CurrentLine
 000005A6  FE 05 00000001 R		inc CurrentLine
 000005AC  E8 00000000 E		call GoToxy
 000005B1  BA 00000138 R		mov edx, offset logo4
 000005B6  E8 00000000 E		call writestring

 000005BB  B8 00000003			mov eax,cyan
 000005C0  E8 00000000 E		call settextcolor

 000005C5  8A 15 00000000 R		mov dl, Xmargin
 000005CB  8A 35 00000001 R		mov dh,CurrentLine
 000005D1  FE 05 00000001 R		inc CurrentLine
 000005D7  E8 00000000 E		call GoToxy
 000005DC  BA 000001A0 R		mov edx, offset logo5
 000005E1  E8 00000000 E		call writestring

 000005E6  58				pop eax
 000005E7  E8 00000000 E		call settextcolor

 000005EC  C3				ret
 000005ED			DrawLogo ENDP

				;---------------------------------------------------
 000005ED			DrawEnigma PROC
				;
				; Desenha na tela o local do enigma e o enigma propriamente dito
				; Recebe: ? 
				; Retorna: ?
				;---------------------------------------------------
 000005ED  B0 2B			mov al, '+'
 000005EF  B9 00000064			mov ecx, LENGTHOF logo1 - 1
 000005F4  FE 05 00000001 R		inc CurrentLine
 000005FA  8A 15 00000000 R		mov dl,Xmargin
 00000600  8A 35 00000001 R		mov dh,CurrentLine
 00000606  FE 05 00000001 R		inc CurrentLine
 0000060C  E8 00000000 E		call GoToxy 
 00000611			L1:
 00000611  E8 00000000 E		call WriteChar
 00000616  E2 F9			loop L1

 00000618  8A 15 00000000 R		mov dl,Xmargin
 0000061E  8A 35 00000001 R		mov dh,CurrentLine
 00000624  E8 00000000 E		call GoToxy
 00000629  E8 00000000 E		call WriteChar
 0000062E  B9 00000005			mov ecx, 5 ;Espacamento esquerdo para comecar a escrever a pergunta
 00000633  B0 20			mov al, ' '
 00000635			L2:
 00000635  E8 00000000 E		call WriteChar
 0000063A  E2 F9			loop L2

 0000063C  BA 00001E76 R		mov edx, OFFSET enigma
 00000641  E8 00000000 E		call WriteString

 00000646  8A 15 00000000 R		mov dl,Xmargin
 0000064C  8A 35 00000001 R		mov dh,CurrentLine
 00000652  80 C2 4A			add dl, OFFSETRESPOSTA ; Aponta para o final da linha do meio da caixa do enigma
 00000655  E8 00000000 E		call GoToxy
 0000065A  B0 2B			mov al, '+'
 0000065C  E8 00000000 E		call WriteChar

 00000661  BA 00001F0C R		mov edx, OFFSET labelResposta
 00000666  E8 00000000 E		call WriteString

 0000066B  B2 0C			mov dl, LENGTHOF labelResposta
 0000066D  02 15 00000000 R		add dl, Xmargin
 00000673  80 C2 4A			add dl, OFFSETRESPOSTA
 00000676  8A 35 00000001 R		mov dh,CurrentLine
 0000067C  66| 89 15			mov posRespostaJogador, dx
	   00001F21 R

 00000683  E8 00000045			call DrawRespostaJogador

 00000688  8A 15 00000000 R		mov dl,Xmargin
 0000068E  8A 35 00000001 R		mov dh,CurrentLine
 00000694  80 C2 63			add dl, 99 ; Aponta para o final da linha do meio da caixa do enigma
 00000697  E8 00000000 E		call GoToxy
 0000069C  B0 2B			mov al, '+'
 0000069E  E8 00000000 E		call WriteChar

 000006A3  FE 05 00000001 R		inc CurrentLine
 000006A9  B9 00000064			mov ecx, LENGTHOF logo1 - 1
 000006AE  8A 15 00000000 R		mov dl,Xmargin
 000006B4  8A 35 00000001 R		mov dh,CurrentLine
 000006BA  FE 05 00000001 R		inc CurrentLine
 000006C0  E8 00000000 E		call GoToxy 
 000006C5			L3:
 000006C5  E8 00000000 E		call WriteChar
 000006CA  E2 F9			loop L3
 000006CC  C3				ret
 000006CD			DrawEnigma ENDP

				;---------------------------------------------------
 000006CD			DrawRespostaJogador PROC
				;
				; ?
				; Recebe: ? 
				; Retorna: ?
				;---------------------------------------------------
 000006CD  E8 00000000 E		call GetTextColor
 000006D2  50				push eax

 000006D3  66| 8B 15			mov dx, posRespostaJogador
	   00001F21 R
 000006DA  E8 00000000 E		call GoToxy

 000006DF  BA 00001F1C R		mov edx, OFFSET respostaJogador

 000006E4  B8 0000002F			mov eax,white + (green * 16)
 000006E9  E8 00000000 E		call settextcolor
					
 000006EE  B0 20			mov al, ' '
 000006F0  E8 00000000 E		call WriteChar
 000006F5  8A 02			mov al, [edx]
 000006F7  E8 00000000 E		call WriteChar
 000006FC  B0 20			mov al, ' '
 000006FE  E8 00000000 E		call WriteChar

 00000703  B8 000000D0			mov eax,black + (lightmagenta * 16)
 00000708  E8 00000000 E		call settextcolor

 0000070D  B0 20			mov al, ' '
 0000070F  E8 00000000 E		call WriteChar
 00000714  8A 42 01			mov al, [edx+1]
 00000717  E8 00000000 E		call WriteChar
 0000071C  B0 20			mov al, ' '
 0000071E  E8 00000000 E		call WriteChar

 00000723  B8 000000E0			mov eax,black + (yellow * 16)
 00000728  E8 00000000 E		call settextcolor

 0000072D  B0 20			mov al, ' '
 0000072F  E8 00000000 E		call WriteChar
 00000734  8A 42 02			mov al, [edx+2]
 00000737  E8 00000000 E		call WriteChar
 0000073C  B0 20			mov al, ' '
 0000073E  E8 00000000 E		call WriteChar

 00000743  B8 0000009F			mov eax,white + (lightblue * 16)
 00000748  E8 00000000 E		call settextcolor

 0000074D  B0 20			mov al, ' '
 0000074F  E8 00000000 E		call WriteChar
 00000754  8A 42 03			mov al, [edx+3]
 00000757  E8 00000000 E		call WriteChar
 0000075C  B0 20			mov al, ' '
 0000075E  E8 00000000 E		call WriteChar

 00000763  58				pop eax
 00000764  E8 00000000 E		call settextcolor
 00000769  C3				ret
 0000076A			DrawRespostaJogador ENDP
				;---------------------------------------------------
 0000076A			DrawMapa PROC
				;
				; Desenha na tela o mapa do labirinto
				; Recebe: ? 
				; Retorna: ?
				;---------------------------------------------------
 0000076A  E8 00000000 E		call GetTextColor
 0000076F  50				push eax
 00000770  B8 0000000F			mov eax,white
 00000775  E8 00000000 E		call settextcolor

 0000077A  B0 DB			mov al, 0dbh
 0000077C  B9 00000064			mov ecx, mapWidth + 2
 00000781  FE 05 00000001 R		inc CurrentLine
 00000787  8A 15 00000000 R		mov dl,Xmargin
 0000078D  8A 35 00000001 R		mov dh,CurrentLine
 00000793  66| 89 15			mov minMap,dx
	   00000003 R
 0000079A  FE 05 00000001 R		inc CurrentLine
 000007A0  E8 00000000 E		call GoToxy

 000007A5			ParedeDeCima:
 000007A5  E8 00000000 E		call WriteChar
 000007AA  E2 F9			loop ParedeDeCima

 000007AC  BB 00001098 R		mov ebx, OFFSET mapMatrix
 000007B1  BE 00001F23 R		mov esi, OFFSET posPortas

 000007B6  B0 DB			mov al, 0dbh
 000007B8  B9 00000024			mov ecx, mapHeight
 000007BD			Labirinto:
 000007BD  8A 15 00000003 R		mov dl, BYTE PTR minMap
 000007C3  8A 35 00000001 R		mov dh, CurrentLine
 000007C9  E8 00000000 E		call GoToxy
 000007CE  E8 00000000 E		call WriteChar; Inicio parede externa esquerda

 000007D3  51				push ecx
 000007D4  B9 00000062			mov ecx, mapWidth
 000007D9  E8 00000000 E		call GetTextColor
 000007DE  50				push eax
 000007DF  B8 00000008			mov eax,gray
 000007E4  E8 00000000 E		call settextcolor
 000007E9				LabirintoInterno:
 000007E9  E8 00000000 E			call GetTextColor
 000007EE  50					push eax
 000007EF  8A 03				mov al, [ebx]
						.IF al == 0bah
 000007F1  3C BA	   *	    cmp    al, 0BAh
 000007F3  75 20	   *	    jne    @C0040
 000007F5  66| 52					push dx

 000007F7  02 15 00000002 R				add dl, CurrentColumn
 000007FD  FE C2					inc dl
 000007FF  66| 89 16					mov [esi], dx

 00000802  66| 5A					pop dx
 00000804  83 C6 02					add esi,2
 00000807  B8 0000000C					mov eax,lightRed
 0000080C  E8 00000000 E				call settextcolor
 00000811  B0 BA					mov al, 0bah
						.ELSEIF al == 0feh
 00000813  EB 58	   *	    jmp    @C0042
 00000815		   *@C0040:
 00000815  3C FE	   *	    cmp    al, 0FEh
 00000817  75 0E	   *	    jne    @C0043
 00000819  B8 0000000A					mov eax,lightgreen
 0000081E  E8 00000000 E				call settextcolor
 00000823  B0 FE					mov al, 0feh
						.ELSEIF al == '1'
 00000825  EB 46	   *	    jmp    @C0045
 00000827		   *@C0043:
 00000827  3C 31	   *	    cmp    al, '1'
 00000829  75 0E	   *	    jne    @C0046
 0000082B  B8 0000002F					mov eax,white + (green * 16)
 00000830  E8 00000000 E				call settextcolor
 00000835  B0 31					mov al, '1'
						.ELSEIF al == '2'
 00000837  EB 34	   *	    jmp    @C0048
 00000839		   *@C0046:
 00000839  3C 32	   *	    cmp    al, '2'
 0000083B  75 0E	   *	    jne    @C0049
 0000083D  B8 000000D0					mov eax,black + (lightmagenta * 16)
 00000842  E8 00000000 E				call settextcolor
 00000847  B0 32					mov al, '2'
						.ELSEIF al == '3'
 00000849  EB 22	   *	    jmp    @C004B
 0000084B		   *@C0049:
 0000084B  3C 33	   *	    cmp    al, '3'
 0000084D  75 0E	   *	    jne    @C004C
 0000084F  B8 000000E0					mov eax,black + (yellow * 16)
 00000854  E8 00000000 E				call settextcolor
 00000859  B0 33					mov al, '3'
						.ELSEIF al == '4'
 0000085B  EB 10	   *	    jmp    @C004E
 0000085D		   *@C004C:
 0000085D  3C 34	   *	    cmp    al, '4'
 0000085F  75 0C	   *	    jne    @C004F
 00000861  B8 0000009F					mov eax,white + (lightBlue * 16)
 00000866  E8 00000000 E				call settextcolor
 0000086B  B0 34					mov al, '4'
						.ENDIF
 0000086D		   *@C004F:
 0000086D		   *@C004E:
 0000086D		   *@C004B:
 0000086D		   *@C0048:
 0000086D		   *@C0045:
 0000086D		   *@C0042:

 0000086D  E8 00000000 E			call WriteChar
 00000872  58					pop eax
 00000873  E8 00000000 E			call settextcolor
						
 00000878  43					inc ebx
 00000879  FE 05 00000002 R			inc CurrentColumn
 0000087F  66| 49				dec cx
 00000881  0F 85 FFFFFF62			jnz LabirintoInterno
 00000887  58				pop eax
 00000888  E8 00000000 E		call settextcolor
 0000088D  59				pop ecx

 0000088E  B0 DB			mov al, 0dbh
 00000890  E8 00000000 E		call WriteChar; Inicio parede externa esquerda
 00000895  FE 05 00000001 R		inc CurrentLine
 0000089B  C6 05 00000002 R		mov CurrentColumn, 0
	   00
 000008A2  66| 49			dec cx
 000008A4  0F 85 FFFFFF13		jnz Labirinto

 000008AA  B0 DB			mov al, 0dbh
 000008AC  B9 00000064			mov ecx, mapWidth + 2
 000008B1  8A 15 00000000 R		mov dl,Xmargin
 000008B7  8A 35 00000001 R		mov dh,CurrentLine
 000008BD  E8 00000000 E		call GoToxy
 000008C2			L3:
 000008C2  E8 00000000 E		call WriteChar
 000008C7  E2 F9			loop L3

 000008C9  8A 15 00000000 R		mov dl, Xmargin
 000008CF  80 C2 63			add dl, mapWidth + 1
 000008D2  66| 89 15			mov maxMap,dx
	   00000005 R

 000008D9  58				pop eax

 000008DA  C3				ret
 000008DB			DrawMapa ENDP

				END main
Microsoft (R) Macro Assembler Version 12.00.21005.1	    02/04/17 16:28:58
getTheKey.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001F2B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008DB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ClearPlayer  . . . . . . . . . .	P Near	 00000458 _TEXT	Length= 00000032 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawEnigma . . . . . . . . . . .	P Near	 000005ED _TEXT	Length= 000000E0 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000611 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000635 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000006C5 _TEXT	
DrawLogo . . . . . . . . . . . .	P Near	 00000509 _TEXT	Length= 000000E4 Public STDCALL
DrawMapa . . . . . . . . . . . .	P Near	 0000076A _TEXT	Length= 00000171 Public STDCALL
  ParedeDeCima . . . . . . . . .	L Near	 000007A5 _TEXT	
  Labirinto  . . . . . . . . . .	L Near	 000007BD _TEXT	
  LabirintoInterno . . . . . . .	L Near	 000007E9 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000008C2 _TEXT	
DrawPlayer . . . . . . . . . . .	P Near	 00000426 _TEXT	Length= 00000032 Public STDCALL
DrawRespostaJogador  . . . . . .	P Near	 000006CD _TEXT	Length= 0000009D Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetElementoMatriz  . . . . . . .	P Near	 00000095 _TEXT	Length= 00000038 Public STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HandleControl  . . . . . . . . .	P Near	 000000CD _TEXT	Length= 00000124 Public STDCALL
  VerificaColisaoLabirinto . . .	L Near	 000001AD _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 000001F0 _TEXT	
HandleSenha  . . . . . . . . . .	P Near	 000001F1 _TEXT	Length= 000001DE Public STDCALL
  VerificaColisaoLabirinto . . .	L Near	 00000318 _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 000003CE _TEXT	
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadMapaFile . . . . . . . . . .	P Near	 0000048A _TEXT	Length= 0000007F Public STDCALL
  PerguntaInicio . . . . . . . .	L Near	 000004AD _TEXT	
  PerguntaFim  . . . . . . . . .	L Near	 000004BA _TEXT	
  RespostaInicio . . . . . . . .	L Near	 000004C0 _TEXT	
  RespostaFim  . . . . . . . . .	L Near	 000004CD _TEXT	
  MapaInicio . . . . . . . . . .	L Near	 000004DA _TEXT	
  ColocaNaMatriz . . . . . . . .	L Near	 000004E6 _TEXT	
  MapaFim  . . . . . . . . . . .	L Near	 00000508 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
VerificaSenha  . . . . . . . . .	P Near	 000003CF _TEXT	Length= 00000057 Public STDCALL
  Verifica . . . . . . . . . . .	L Near	 000003DE _TEXT	
  AbrePorta  . . . . . . . . . .	L Near	 00000406 _TEXT	
  Diferente  . . . . . . . . . .	L Near	 00000425 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000095 Public STDCALL
  INICIALIZADOR  . . . . . . . .	L Near	 00000000 _TEXT	
  MAINLOOP . . . . . . . . . . .	L Near	 00000046 _TEXT	
  FIM  . . . . . . . . . . . . .	L Near	 00000082 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFERMAPA . . . . . . . . . . .	Byte	 00000208 _DATA	
BUFSIZE  . . . . . . . . . . . .	Number	 00000E90h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CurrentColumn  . . . . . . . . .	Byte	 00000002 _DATA	
CurrentLine  . . . . . . . . . .	Byte	 00000001 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OFFSETRESPOSTA . . . . . . . . .	Number	 0000004Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
Xmargin  . . . . . . . . . . . .	Byte	 00000000 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dispositivos . . . . . . . . . .	Byte	 00001E72 _DATA	
elementoAux  . . . . . . . . . .	Byte	 00001E6C _DATA	
enigma . . . . . . . . . . . . .	Byte	 00001E76 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
labelResposta  . . . . . . . . .	Byte	 00001F0C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
logo1  . . . . . . . . . . . . .	Byte	 00000007 _DATA	
logo2  . . . . . . . . . . . . .	Byte	 0000006C _DATA	
logo3  . . . . . . . . . . . . .	Byte	 000000D2 _DATA	
logo4  . . . . . . . . . . . . .	Byte	 00000138 _DATA	
logo5  . . . . . . . . . . . . .	Byte	 000001A0 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
mapHeight  . . . . . . . . . . .	Number	 00000024h   
mapMatrix  . . . . . . . . . . .	Byte	 00001098 _DATA	
mapWidth . . . . . . . . . . . .	Number	 00000062h   
mapaFileName . . . . . . . . . .	Byte	 00001E60 _DATA	
maxMap . . . . . . . . . . . . .	Word	 00000005 _DATA	
minMap . . . . . . . . . . . . .	Word	 00000003 _DATA	
playerSymbol . . . . . . . . . .	Byte	 00001E6D _DATA	
playerXAux . . . . . . . . . . .	Byte	 00001E6F _DATA	
playerX  . . . . . . . . . . . .	Byte	 00001E6E _DATA	
playerYAux . . . . . . . . . . .	Byte	 00001E71 _DATA	
playerY  . . . . . . . . . . . .	Byte	 00001E70 _DATA	
posPortas  . . . . . . . . . . .	Word	 00001F23 _DATA	
posRespostaJogador . . . . . . .	Word	 00001F21 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
respostaJogador  . . . . . . . .	Byte	 00001F1C _DATA	
respostaOriginal . . . . . . . .	Byte	 00001F18 _DATA	
statusResposta . . . . . . . . .	Byte	 00001F20 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
